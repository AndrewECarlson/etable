// Code generated by "stringer -type=StdMetrics"; DO NOT EDIT.

package metric

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Euclidean-0]
	_ = x[SumSquares-1]
	_ = x[Abs-2]
	_ = x[Hamming-3]
	_ = x[EuclideanBinTol-4]
	_ = x[SumSquaresBinTol-5]
	_ = x[InvCosine-6]
	_ = x[InvCorrelation-7]
	_ = x[CrossEntropy-8]
	_ = x[InnerProduct-9]
	_ = x[Covariance-10]
	_ = x[Correlation-11]
	_ = x[Cosine-12]
	_ = x[StdMetricsN-13]
}

const _StdMetrics_name = "EuclideanSumSquaresAbsHammingEuclideanBinTolSumSquaresBinTolInvCosineInvCorrelationCrossEntropyInnerProductCovarianceCorrelationCosineStdMetricsN"

var _StdMetrics_index = [...]uint8{0, 9, 19, 22, 29, 44, 60, 69, 83, 95, 107, 117, 128, 134, 145}

func (i StdMetrics) String() string {
	if i < 0 || i >= StdMetrics(len(_StdMetrics_index)-1) {
		return "StdMetrics(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StdMetrics_name[_StdMetrics_index[i]:_StdMetrics_index[i+1]]
}

func (i *StdMetrics) FromString(s string) error {
	for j := 0; j < len(_StdMetrics_index)-1; j++ {
		if s == _StdMetrics_name[_StdMetrics_index[j]:_StdMetrics_index[j+1]] {
			*i = StdMetrics(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: StdMetrics")
}
